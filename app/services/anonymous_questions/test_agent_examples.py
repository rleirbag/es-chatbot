"""
Exemplos de como o Agente de Classifica√ß√£o de T√≥picos funciona
Este arquivo demonstra a capacidade do agente de classificar diferentes tipos de perguntas
"""

from app.services.anonymous_questions.topic_classification_agent import SoftwareEngineeringTopicAgent


def test_agent_classification():
    """Testa o agente com exemplos reais de perguntas"""
    
    agent = SoftwareEngineeringTopicAgent()
    
    # Exemplos de perguntas e seus t√≥picos esperados
    test_cases = [
        # Programa√ß√£o e Desenvolvimento
        ("Como fa√ßo um loop em Python?", "Programa√ß√£o e Desenvolvimento"),
        ("O que √© uma fun√ß√£o em JavaScript?", "Programa√ß√£o e Desenvolvimento"),
        ("Erro no meu c√≥digo Python", "Programa√ß√£o e Desenvolvimento"),
        ("Como declarar uma vari√°vel em Java?", "Programa√ß√£o e Desenvolvimento"),
        
        # Arquitetura e Design
        ("O que √© o padr√£o MVC?", "Arquitetura e Design de Software"),
        ("Como aplicar SOLID principles?", "Arquitetura e Design de Software"),
        ("Diferen√ßa entre microservi√ßos e monolito", "Arquitetura e Design de Software"),
        ("Padr√£o Singleton como implementar?", "Arquitetura e Design de Software"),
        
        # Banco de Dados
        ("Como fazer um JOIN no SQL?", "Banco de Dados"),
        ("O que √© normaliza√ß√£o de banco?", "Banco de Dados"),
        ("Diferen√ßa entre MySQL e PostgreSQL", "Banco de Dados"),
        ("Como otimizar uma query lenta?", "Banco de Dados"),
        
        # APIs e Servi√ßos Web
        ("Como criar uma API REST?", "APIs e Servi√ßos Web"),
        ("O que √© autentica√ß√£o JWT?", "APIs e Servi√ßos Web"),
        ("Diferen√ßa entre GET e POST", "APIs e Servi√ßos Web"),
        ("Como integrar sistemas via API?", "APIs e Servi√ßos Web"),
        
        # Frameworks Web
        ("Como usar React Hooks?", "Frameworks e Desenvolvimento Web"),
        ("Configurar um projeto Django", "Frameworks e Desenvolvimento Web"),
        ("Diferen√ßa entre Angular e Vue", "Frameworks e Desenvolvimento Web"),
        ("FastAPI vs Flask qual usar?", "Frameworks e Desenvolvimento Web"),
        
        # DevOps
        ("Como usar Docker containers?", "DevOps e Infraestrutura"),
        ("O que √© CI/CD pipeline?", "DevOps e Infraestrutura"),
        ("Deploy na AWS como fazer?", "DevOps e Infraestrutura"),
        ("Kubernetes para iniciantes", "DevOps e Infraestrutura"),
        
        # Testes
        ("Como escrever testes unit√°rios?", "Testes de Software"),
        ("O que √© TDD?", "Testes de Software"),
        ("Cobertura de testes como medir?", "Testes de Software"),
        ("Automa√ß√£o de testes com Selenium", "Testes de Software"),
        
        # Controle de Vers√£o
        ("Como fazer merge no Git?", "Controle de Vers√£o"),
        ("O que √© pull request?", "Controle de Vers√£o"),
        ("Git rebase vs merge", "Controle de Vers√£o"),
        ("Resolver conflitos no GitHub", "Controle de Vers√£o"),
        
        # Seguran√ßa
        ("Como evitar SQL injection?", "Seguran√ßa de Software"),
        ("O que √© criptografia SSL?", "Seguran√ßa de Software"),
        ("Vulnerabilidades OWASP top 10", "Seguran√ßa de Software"),
        ("Autentica√ß√£o vs autoriza√ß√£o", "Seguran√ßa de Software"),
        
        # Metodologias
        ("O que √© metodologia Scrum?", "Metodologias e Processos"),
        ("Como fazer sprint planning?", "Metodologias e Processos"),
        ("Diferen√ßa entre Agile e Waterfall", "Metodologias e Processos"),
        ("O que √© backlog do produto?", "Metodologias e Processos"),
        
        # Algoritmos
        ("Complexidade Big O notation", "Algoritmos e Estruturas de Dados"),
        ("Como implementar ordena√ß√£o bubble sort?", "Algoritmos e Estruturas de Dados"),
        ("O que √© uma √°rvore bin√°ria?", "Algoritmos e Estruturas de Dados"),
        ("Algoritmo de busca em grafos", "Algoritmos e Estruturas de Dados"),
        
        # Ferramentas
        ("Qual IDE usar para Python?", "Ferramentas de Desenvolvimento"),
        ("Como debugar c√≥digo no VS Code?", "Ferramentas de Desenvolvimento"),
        ("Configurar linter no projeto", "Ferramentas de Desenvolvimento"),
        ("Refactoring tools recomendadas", "Ferramentas de Desenvolvimento"),
        
        # Perguntas que podem ser classificadas como "Outros"
        ("Obrigado pela explica√ß√£o", "Outros"),
        ("Entendi perfeitamente", "Outros"),
        ("Vou testar agora", "Outros"),
    ]
    
    print("ü§ñ TESTE DO AGENTE DE CLASSIFICA√á√ÉO DE T√ìPICOS")
    print("=" * 60)
    
    correct_predictions = 0
    total_predictions = len(test_cases)
    
    for question, expected_topic in test_cases:
        predicted_topic = agent.classify_topic(question)
        is_correct = predicted_topic == expected_topic
        
        if is_correct:
            correct_predictions += 1
            status = "‚úÖ"
        else:
            status = "‚ùå"
        
        print(f"{status} Pergunta: {question}")
        print(f"   Esperado: {expected_topic}")
        print(f"   Predito:  {predicted_topic}")
        print()
    
    accuracy = (correct_predictions / total_predictions) * 100
    print(f"üìä RESULTADOS:")
    print(f"   Acertos: {correct_predictions}/{total_predictions}")
    print(f"   Precis√£o: {accuracy:.1f}%")
    
    return accuracy


def demonstrate_agent_features():
    """Demonstra outras funcionalidades do agente"""
    
    agent = SoftwareEngineeringTopicAgent()
    
    print("\nüîç FUNCIONALIDADES DO AGENTE")
    print("=" * 60)
    
    # Mostrar todos os t√≥picos dispon√≠veis
    print("üìö T√ìPICOS DISPON√çVEIS:")
    topics = agent.get_all_topics()
    for i, topic in enumerate(topics, 1):
        print(f"   {i:2d}. {topic['name']}")
        print(f"       {topic['description']}")
        print(f"       Keywords: {topic['keywords_count']}, Patterns: {topic['patterns_count']}")
        print()
    
    # Testar sugest√µes
    print("üí° SUGEST√ïES DE T√ìPICOS:")
    test_searches = ["python", "web", "test", "git", "docker"]
    for search in test_searches:
        suggestions = agent.get_topic_suggestions(search)
        print(f"   '{search}' ‚Üí {suggestions}")
    
    # Detalhes de um t√≥pico espec√≠fico
    print("\nüîé DETALHES DE UM T√ìPICO:")
    details = agent.get_topic_details("Programa√ß√£o e Desenvolvimento")
    if details:
        print(f"   Nome: {details['name']}")
        print(f"   Descri√ß√£o: {details['description']}")
        print(f"   Keywords (primeiras 10): {details['keywords'][:10]}")
        print(f"   Patterns: {details['patterns']}")


if __name__ == "__main__":
    # Executa os testes
    accuracy = test_agent_classification()
    
    # Demonstra funcionalidades
    demonstrate_agent_features()
    
    print(f"\nüéØ RESUMO: O agente alcan√ßou {accuracy:.1f}% de precis√£o nos testes!") 